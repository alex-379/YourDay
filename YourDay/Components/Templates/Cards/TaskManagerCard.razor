@inject IJSRuntime JSRuntime
<button @onclick="() => ShowModal(taskcCard.Id)" class="worker-button">	&#128051;</button>
@* <ManagerDialogForTaskModalForm aaa=selectedtaskId></ManagerDialogForTaskModalForm> *@



<div class="task-card black">
    <p>@taskcCard.Title </p>
    <p>@taskcCard.Description </p>
    <p>@taskcCard.TimeStart.ToShortTimeString() - @taskcCard.TimeEnd.ToShortTimeString()</p>
    <p>@taskcCard.Specialization.Name</p>
    <p>@taskcCard.Id </p>

    @* <p>@taskcCard.Specialization </p>  *@
    @* <p>@taskcCard.TimeStart.ToShortTimeString() - @taskcCard.TimeEnd.ToShortTimeString()</p> *@
</div>


@code {
    [Parameter]
    public TaskOutputModelWithSpecialization taskcCard { get; set; }

    [Parameter] public EventCallback<int> OnOpenModal { get; set; }

    public int selectedtaskId;

    private async Task ShowModal(int taskId)
    {


        selectedtaskId = taskId;

        await JSRuntime.InvokeVoidAsync("aaa.showModal");

        StateHasChanged();

        await OnOpenModal.InvokeAsync(taskId);
    }

}

