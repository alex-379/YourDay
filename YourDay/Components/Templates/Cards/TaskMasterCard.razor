<p>@Task.Title </p>
@if (Task.Specialization != null)
{
    <p>Специализация: @Task.Specialization.Name</p>
}
<p>@Task.TimeStart.ToShortTimeString() - @Task.TimeEnd.ToShortTimeString()</p>
<p>@_enumService.GetDisplayName(Task.Status)</p>
<p>
    @if (Task.Workers != null)
    {
        foreach (var i in Task.Workers)
        {
        <p>Сотрудники: @i.UserName</p>
        }
    }
</p>

<section>
    <div class="form-group">
        <label>Назначить сотрудника:</label>
        <InputSelect class="form-control" @bind-Value="_selectedWorkerId" @onchange="AddWorker" placeholder="Выберите специализацию:">
            @foreach (UserSpecializationOutputModel i in _users)
            {
                <option value=@i.Id>@i.UserName</option>
            }
        </InputSelect>
        <input type="button" @onclick="AddWorker">Подтвердить</input>
    </div>
</section>

@code {
    [Parameter]
    public TaskOutputModelAllInfo Task { get; set; }

    private ITaskService _taskService;

    private IUserService _userService;

    private IEnumService _enumService;

    private IManagerService _managerService;

    private int _selectedWorkerId;

    private IEnumerable<UserSpecializationOutputModel> _users;

    public TaskMasterCard()
    {
        _taskService = new TaskService();
        _userService = new UserService();
        _enumService = new EnumService();
        _users = Enumerable.Empty<UserSpecializationOutputModel>();
    }

    protected override async Task OnInitializedAsync()
    {
        @if (Task.Specialization != null)
        {
            _users = await _userService.GetAllUsersSpecializationByRoleBySpeciailiztion(RoleUI.Worker, Task.Specialization.Id);
        }
        else
        {
            _users = await _userService.GetAllUsersSpecializationByRole(RoleUI.Worker);
        }
    }

    private void AddWorker()
    {
        _managerService.AddWorkerForTask(Task.Id, _selectedWorkerId);
    }
}