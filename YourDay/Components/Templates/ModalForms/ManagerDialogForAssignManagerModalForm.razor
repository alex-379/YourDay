<dialog id="manager" aria-labelledby="heading">
    <div class="manager-reassign-container">
        <div>Назначить менеджера на заказ:</div>
        <div>
            <select onchange="@ManagerSelection" value="@_selectedManagerId">
                @if (_managers is not null)
                {
                    @foreach (ManagerNameAndPhoneOutputModel outputModel in _managers)
                    {
                        <option value="@outputModel.Id">@outputModel.Name</option>
                    }
                }
            </select>
        </div>
        <div>
            <button onclick="@AddManagerToOrder" disabled="@_isSameManagerSelected">Назначить</button>
        </div>
        <form method="dialog">
            <button> Закрыть</button>
        </form>
    </div>
</dialog>

@code {
    [Parameter]
    public int OrderId { get; set; }

    [Parameter]
    public int ManagerId { get; set; }

    private int _selectedManagerId;

    private bool _isSameManagerSelected = true;

    private IEnumerable<ManagerNameAndPhoneOutputModel> _managers;

    private IManagerService _managerService;

    public ManagerDialogForAssignManagerModalForm()
    {
        _managers = Enumerable.Empty<ManagerNameAndPhoneOutputModel>();
        _managerService = new ManagerService();
    }

    public void ManagerSelection(ChangeEventArgs e)
    {
        _selectedManagerId = int.Parse(e.Value.ToString());

        _isSameManagerSelected = (_selectedManagerId == ManagerId);
    }

    public void AddManagerToOrder()
    {
        _managerService.AddManagerIdToOrder(_selectedManagerId, OrderId);
    }
}


    public TaskOutputModel TaskOutput { get; set; }

    private IOrderService _orderService;

    private ITaskService _taskService;



    public IEnumerable<TaskOutputModelWithSpecialization> _task;

    public StatusUI status;



    private List<TaskOutputModelAllInfo> _tasks;



            public int selectedtaskId;

    public Order()
    {
        _orderService = new OrderService();

        _taskService = new TaskService();

        _enumService = new EnumService();

        OrderOutput = new OrderOutputModel();

        _managerService = new ManagerService();

        TaskOutput = new TaskOutputModel();

        IEnumerable<TaskOutputModelWithSpecialization> task = new List<TaskOutputModelWithSpecialization>();

        status = StatusUI.Completed;

    }

    private async Task ShowModal(int taskId)
    {
        selectedtaskId = taskId;

        await JSRuntime.InvokeVoidAsync("user.showModal");

        StateHasChanged();
    }

    public void UpdateStatus()
    {
        _orderService.UpdateOrderStatus(Id, status);
    }
    public void Close()
    {

        NavigationManager.NavigateTo("/order/Id");
    }

    protected override async Task OnInitializedAsync()
    {
        OrderOutputModel orderOutput = await _orderService.GetOrderById(Id);
        OrderOutput.Id = orderOutput.Id;
        OrderOutput.OrderName = orderOutput.OrderName;
        OrderOutput.Date = orderOutput.Date;
        OrderOutput.Address = orderOutput.Address;
        OrderOutput.CountPeople = orderOutput.CountPeople;
        OrderOutput.Price = orderOutput.Price;
        OrderOutput.Status = orderOutput.Status;
        OrderOutput.Manager = orderOutput.Manager;
        selectedManagerId = orderOutput.Manager.Id;

        _managers = await _managerService.GetAllManagers();

        _task = await _taskService.GetTasksByOrderIdWithSpecialization(Id);
    }

    public void UpdateStatusOrder(ChangeEventArgs e)
    {
        int newStatusInt = int.Parse(e.Value.ToString());

        StatusUI newStatus = new StatusUI();

        switch (newStatusInt)
        {
            case 0:
                newStatus = StatusUI.Received;

                break;
            case 1:
                newStatus = StatusUI.InProgress;

                break;
            case 2:
                newStatus = StatusUI.Completed;

                break;
            case 3:
                newStatus = StatusUI.Canselled;

                break;
        }

        _orderService.UpdateOrderStatus(Id, newStatus);
    }

