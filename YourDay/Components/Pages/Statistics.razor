@page "/manager-statistics"
@using static Microsoft.EntityFrameworkCore.DbLoggerCategory
@attribute [StreamRendering]
@inject NavigationManager NavigationWorker

@if (returnRole != RoleUI.Manager.ToString())
{
    <ReturnToStart></ReturnToStart>
}
else
{
    <PageTitle>Cтатистика</PageTitle>

    <div>
        <h2 class="manager-h1">Здесь вы можете посмотреть статистику по всей компании:</h2>
    </div>

    <table>
        <thead>
            @foreach (ManagerRowsColumn column in ColumnsManager)
            {
            <th>
                    @column.LayoutHeader
            </th>
            }
        </thead>
        <tbody>
            @foreach (ManagerRow managerRow in orderByManagerGroups)
            {
                <tr>
                    @foreach (ManagerRowsColumn column in ColumnsManager)
                    {
                        <td>
                            @typeof(ManagerRow).GetProperty(column.Field).GetValue(managerRow)
                        </td>
                    }
                </tr>
                <tr>
                     <table>
                         <thead>
                            @foreach (Column column in SubTableColumns)
                            {
                                <th >
                                        @column.LayoutHeader
                                </th>
                            }
                        </thead>
                        <tbody>
                            @foreach (OrderSubRow subRow in outputModel.SubRows)
                            {
                                <tr >
                                    @foreach (Column column in SubTableColumns)
                                    {
                                        <td >
                                            @typeof(SubRow).GetProperty(column.Field).GetValue(subRow)
                                        </td>
                                    }
                                </tr>
                             }
                        </tbody>
                    </table>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<CompanyStatisticOutputModel> _tasks;

    private CompanyStatisticsService _statistics;

    private List<ManagerRowsColumn> ColumnsManager { get; set; }

    private List<OrderRowColumn> ColumnsOrder { get; set; }

    private List<ManagerRow> ManagerRows{ get; set; }

    private List<OrderRow> OrderRows { get; set; }

    private IEnumerable<ManagerRow> orderByManagerGroups { get; set; }



    class Column
    {
        public string Field { get; set; }
        public string LayoutHeader { get; set; }
    }

    [CascadingParameter]
    public Task<AuthenticationState> State { get; set; }

    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    private string returnRole;

    public Statistics()
    {
        _tasks = new List<CompanyStatisticOutputModel>();
        _statistics = new CompanyStatisticsService();
        ColumnsManager = new List<ManagerRowsColumn>();
        ColumnsOrder = new List<OrderRowColumn>();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetClaims().ConfigureAwait(false);
        if (returnRole == RoleUI.Manager.ToString())
        {
            ColumnsManager = new List<ManagerRowsColumn>();

            ColumnsManager.AddRange(
                new ManagerRowsColumn[]
                {
                    new ManagerRowsColumn()
                {
                    Field="ManagerId",
                    LayoutHeader="Индификатор менеджера"
                },
                new ManagerRowsColumn()
                {
                    Field="ManagerName",
                    LayoutHeader="Имя менеджера"
                }
                });

            ColumnsOrder = new List<OrderRowColumn>();
            ColumnsOrder.AddRange(
                new OrderRowColumn[]
                {
                    new OrderRowColumn()
                    {
                        Field = "IdOrder",
                        LayoutHeader = "Индификатор заказа"
                    },
                    new OrderRowColumn()
                    {
                        Field = "TitleOrder",
                        LayoutHeader = "Название заказа"
                    }
                });
            _tasks = _statistics.GetAllTaskOfOrderOfTheirManager();

            orderByManagerGroups = _tasks
                .GroupBy(task => task.IdManager)
                .Select((tasksGroupByManager) => {
                    CompanyStatisticOutputModel? currentTask = _tasks.Find((taskFromOutputModel) => taskFromOutputModel.IdManager == tasksGroupByManager.Key);

                    IEnumerable<IGrouping<int, TaskRow>> TasksByOrder = tasksGroupByManager
                                .Select(taskFromOutputModel => new TaskRow()
                                {
                                    OrderId = taskFromOutputModel.IdOrder,
                                    ManagerId = taskFromOutputModel.IdManager,
                                    TaskName = taskFromOutputModel.TitleTask
                                })
                                .GroupBy(task => task.OrderId);

                    return new ManagerRow()
                    {
                        ManagerId = tasksGroupByManager.Key,
                        ManagerName = currentTask?.NameManager,
                        TasksByOrder = TasksByOrder
                    };
                });
        }
    }
    private async Task GetClaims()
    {
        var authState = await State;
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            claims = user.Claims;
            returnRole = claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value).Single();
        }
    }
}
