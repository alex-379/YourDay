@page "/statistics"
@attribute [StreamRendering]
@inject NavigationManager NavigationWorker

@if (returnRole != RoleUI.Manager.ToString())
{
    <ReturnToStart></ReturnToStart>
}
else
{
    <PageTitle>Cтатистика</PageTitle>

    <div>
        <h2 class="manager-h1">Здесь вы можете посмотреть статистику по всей компании:</h2>
    </div>

    <table>
        <thead>
            @foreach (Column column in Columns)
            {
            <th>
                    @column.LayoutHeader
            </th>
            }
        </thead>
        <tbody>
            @foreach (CompanyStatisticOutputModel outputModel in _model)
            {
                <tr>
                    @foreach (Column column in Columns)
                    {
                        <td>
                            @typeof(CompanyStatisticOutputModel).GetProperty(column.Field).GetValue(_statistics)
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<CompanyStatisticOutputModel> _model;

    private CompanyStatisticsService _statistics;

    private List<Column> Columns { get; set; }

    class Column
    {
        public string Field { get; set; }
        public string LayoutHeader { get; set; }
    }

    [CascadingParameter]
    public Task<AuthenticationState> State { get; set; }

    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    private string returnRole;

    public Statistics()
    {
        _model = new List<CompanyStatisticOutputModel>();
        _statistics = new CompanyStatisticsService();
        Columns = new List<Column>();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetClaims().ConfigureAwait(false);
        if (returnRole == RoleUI.Worker.ToString())
        {
            Columns = new List<Column>();

            Columns.AddRange(
                new Column[]
                {
                new Column()
                {
                    Field="NameManager",
                    LayoutHeader="Имя менеджера"
                },

                new Column()
                {
                    Field="TitleOrder",
                    LayoutHeader="Название заказа"
                },
                new Column()
                {
                    Field="TitleTask",
                    LayoutHeader="название задачи"
                }

                });

            _model = _statistics.GetAllTaskOfOrderOfTheirManager();
        }
    }
    private async Task GetClaims()
    {
        var authState = await State;
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            claims = user.Claims;
            returnRole = claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value).Single();
        }
    }
}
