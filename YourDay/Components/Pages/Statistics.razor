@page "/manager-statistics"
@attribute [StreamRendering]
@inject NavigationManager NavigationWorker

<GetClaims SendIsCompleted="b=>_isCompleted=b" SendRole="p=>_role=p"></GetClaims>

@if (_isCompleted && _role != RoleUI.Manager.ToString())
{
    <ReturnToStart></ReturnToStart>
}
else
{
    <PageTitle>Cтатистика</PageTitle>

    <div>
        <h2 class="manager-h1">Здесь вы можете посмотреть статистику по всей компании:</h2>
    </div>

    <table>
        <thead>
            @foreach (Column column in _table.Columns)
            {
            <th>
                    @column.LayoutHeader
            </th>
            }
        </thead>
        <tbody>
            @foreach (CompanyStatisticOutputModel outputModel in _model)
            {
                <tr>
                    @foreach (Column column in _table.Columns)
                    {
                        <td>
                            @typeof(CompanyStatisticOutputModel).GetProperty(column.Field).GetValue(outputModel)
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string? _role;

    private bool _isCompleted;

    private Tables _table;

    private IEnumerable<CompanyStatisticOutputModel> _model;

    private IManagerService _statistics;

    public Statistics()
    {
        _model = new List<CompanyStatisticOutputModel>();
        _statistics = new ManagerService();
        _table = new Tables();
    }

    protected override async Task OnInitializedAsync()
    {
        _table.GetTableForStatistics();
        _model = await _statistics.GetAllTaskOfOrderOfTheirManager();
    }
}