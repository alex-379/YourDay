@page "/registration"

@page "/r"
@attribute [StreamRendering]
@rendermode InteractiveServer
@* 


    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" style="background-color: #4340D2">
        <i class="bi bi-plus"></i>
        Добавить
    </button>

<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <AuthenticationModalForm AddService="AddService" />
</div>
@code
{
    [Parameter] public int Id { get; set; }
    [Parameter] public string? Name { get; set; }
    [Parameter] public string? Description { get; set; }
    [Parameter] public int Cost { get; set; }

    [Parameter] public List<ServiceOutputModel> Services { get; set; }
    private IServiceClient _serviceClient;

    private ServiceInputModel _inputService;

    public MyServicesPage()
    {
        _serviceClient = new ServiceMock();
        Services = _serviceClient.GetAllServices();
        _inputService = new ServiceInputModel();
    }

    public void AddService(ServiceInputModel input)
    {
        var s = _serviceClient.AddService(input);
        Services.Add(s);
        StateHasChanged();
    }

    public void DeleteService(ServiceOutputModel service)
    {
        Services.Remove(service);
    }
}
 *@
@* 
<div class="container-add-order">
    <div class="fields-add-order">
        <form>
            <h2 class="manager-h1">Регистрация:</h2>

            <div class="container-for-text">
                <label class="text">Имя:</label>
                <input @bind=_user.UserName class="field" type="name" placeholder="Введите имя">
            </div>
            <div class="container-for-text">
                <label class="text">Почта:</label>
                <input @bind=_user.Mail class ="field" type="text" placeholder="Введите почту">
            </div>
            <div class="container-for-text">
                <label class="text">Телефон:</label>
                <input @bind=_user.Phone class ="field" type="text" placeholder="Введите телефон">
            </div>
            <div class="container-for-text">
                <label class="text">Пароль:</label>
                <input @bind=_user.Password class ="field" type="text" placeholder="Введите пароль">
            </div>
        </form>

        <div>
            <button @onclick=AddUser class="purple-button">Регистрация</button>
            <button class="purple-button">Отмена</button>
        </div>
    </div>
</div> *@


<section>
    <div class="manager-blok">
        <h2 class="manager-h1"> Пользователи:</h2>
        <div class="manager-button-container">
            @foreach (var i in _users)
            {
                <button class="client-button"> <UserCard user=i> </UserCard> </button>
            }
        </div>
    </div>
</section>

<AuthorizeView>
    <Authorized>
        Авторизован
        @*         @claims.Where(c => c.Type == "Name") *@
    </Authorized>

</AuthorizeView>
<AuthorizeView>
    <NotAuthorized>Необходимо войти</NotAuthorized>

</AuthorizeView>

@code
{
    private UserRegistrationInputModel _user;

    private List<UserOutputModel> _users;

    private IUserService _userService;

    public UserTests()
    {
        _userService = new UserService();
    }

    protected override void OnInitialized()
    {
        _users = _userService.GetAllUsers().ToList();

        _user = new UserRegistrationInputModel();
    }

    // public void AddUser()
    // {
    //     _users.Add(_userSeAddUserClient(_user));
    // }
}

@code {
    [CascadingParameter]
    public Task<AuthenticationState> State { get; set; }

    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    private async Task GetClaimsPrincipalData()
    {
        var authState = await State;
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            claims = user.Claims;
        }
    }
}