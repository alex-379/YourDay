@page "/1"
@rendermode InteractiveServer
@attribute [StreamRendering]
@using YourDay.Components.Pages.TestPages

<Component SendName="name=>Name=name"></Component>


@if (Name != RoleUI.Manager.ToString())
{
    @*  <ReturnToStart></ReturnToStart> *@
    <div>
        NAMEEEEEEEEEE  @Name
    </div>

}
else
{
    <p>менеджер</p>
}



@code {
    public string Name { get; set; }
}

@code {
    [CascadingParameter]
    public Task<AuthenticationState> State { get; set; }

    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    private string returnAddress;

    private string returnRole;

    protected override async Task OnInitializedAsync()
    {
        await GetClaims().ConfigureAwait(false);
    }

    private async Task GetClaims()
    {
        var authState = await State;
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            claims = user.Claims;
            returnAddress = claims.Where(c => c.Type == ClaimTypes.Email).Select(c => c.Value).Single();
            returnRole = claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value).Single();
        }
    }
}