@page "/order/{Id:int}"
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

@if (returnRole != RoleUI.Manager.ToString())
{
    <ReturnToStart></ReturnToStart>
}
else
{
    <div class="body">
        <section class="white">
            <table class="table white">
                <thead>
                    <tr>
                        <th>Праздник</th>
                        <th>Дата</th>
                        <th>Адрес</th>
                        <th>Количество гостей</th>
                        <th>Цена</th>
                        <th>Статус</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@OrderOutput.OrderName</td>
                        <td>@OrderOutput.Date</td>
                        <td>@OrderOutput.Address</td>
                        <td>@OrderOutput.CountPeople</td>
                        <td>@OrderOutput.Price</td>
                        <td>@OrderOutput.Status</td>
                    </tr>
                </tbody>
            </table>
        </section>
        <div class="manager-reassign-container">
            <div>Назначить менеджера на заказ:</div>
            <div>
                <select onchange="@ManagerSelection" value="@selectedManagerId">
                    @foreach (ManagerNameAndPhoneOutputModel outputModel in _managers)
                    {
                        <option value="@outputModel.Id">@outputModel.Name</option>
                    }
                </select>
            </div>
            <div>
                <button onclick="@AddManagerToOrder" disabled="@isSameManagerSelected">Назначить</button>
            </div>
        </div>

        <dialog id="task" aria-labelledby="heading">
            <h2 id="heading">Что сделать с таской? &#128054 </h2>

            <form method="dialog">
                <button>
                    Изменить
                </button>
                <button>
                    Установить статус:
                </button>
                <button>
                    Архивировать
                </button>
            </form>
        </dialog>


        <section>
            <h2 class="manager-h1"> Задачи:</h2>
            <div class="container-task">
                @foreach (var i in task)
                {
                    <button class="task-button"><TaskManagerCard taskcCard=i> </TaskManagerCard> </button>
                }
            </div>
        </section>


        <section>
            <div class="button-container">
                <button class="purple-button"> История заказа </button>
                <button class="purple-button"> Завершить заказ </button>
                <button class="purple-button"> Другое</button>
                <button class="order-button"> <AddTaskCard order=OrderOutput> </AddTaskCard> </button>
            </div>
        </section>
    </div>
}


@code
{
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public OrderOutputModel OrderOutput { get; set; }

    public TaskOutputModel TaskOutput { get; set; }

    private IOrderService _orderService;

    private ITaskService _taskService;

    public IEnumerable<TaskOutputModelWithSpecialization> task;

    [CascadingParameter]
    public Task<AuthenticationState> State { get; set; }

    public List<ManagerNameAndPhoneOutputModel> _managers;

    private List<TaskOutputModelAllInfo> _tasks;

    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();
    private string returnRole;


    private IManagerService _managerService;
    public int selectedManagerId;
    public bool isSameManagerSelected = true;

    public Order()
    {
        _orderService = new OrderService();

        _taskService = new TaskService();

        OrderOutput = new OrderOutputModel();
        _managerService = new ManagerService();

        TaskOutput = new TaskOutputModel();

        IEnumerable<TaskOutputModelWithSpecialization> task = new List<TaskOutputModelWithSpecialization>();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetClaims().ConfigureAwait(false);
        if (returnRole == "Manager")
        {
            OrderOutputModel orderOutput = _orderService.GetOrderById(Id);
            OrderOutput.Id = orderOutput.Id;
            OrderOutput.OrderName = orderOutput.OrderName;
            OrderOutput.Date = orderOutput.Date;
            OrderOutput.Address = orderOutput.Address;
            OrderOutput.CountPeople = orderOutput.CountPeople;
            OrderOutput.Price = orderOutput.Price;
            OrderOutput.Manager = orderOutput.Manager;
            OrderOutput.Client = orderOutput.Client;
            selectedManagerId = orderOutput.Manager.Id;

            _managers = _managerService.GetAllManagers();

            task = _taskService.GetTasksByOrderIdWithSpecialization(Id);
        }
    }

    private async Task GetClaims()
    {
        var authState = await State;
        var user = authState.User;


        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            claims = user.Claims;
            returnRole = claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value).Single();
        }
    }
    public void ManagerSelection(ChangeEventArgs e)
    {
        selectedManagerId = int.Parse(e.Value.ToString());

        isSameManagerSelected = selectedManagerId == OrderOutput.Manager.Id;
    }
    public void AddManagerToOrder()
    {
        _managerService.AddManagerIdToOrder(selectedManagerId, Id);
    }
}
    

   

    
