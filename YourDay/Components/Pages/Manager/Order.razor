@page "/order/{Id:int}"
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<GetClaims SendIsCompleted="b=>_isCompleted=b" SendRole="p=>_role=p"></GetClaims>

@if (_isCompleted && _role != RoleUI.Manager.ToString())
{
    <ReturnToStart></ReturnToStart>
}
else
{
    if (_isReceieved)
    {
        <section class="white">
            <table class="table white">
                <thead>
                    <tr>
                        <th>Праздник</th>
                        <th>Дата</th>
                        <th>Адрес</th>
                        <th>Количество гостей</th>
                        <th>Цена</th>
                        <th>Статус</th>
                        <th>Менеджер</th>
                        <th>Клиент</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@OrderOutput.OrderName</td>
                        <td>@OrderOutput.Date</td>
                        <td>@OrderOutput.Address</td>
                        <td>@OrderOutput.CountPeople</td>
                        <td>@OrderOutput.Price</td>
                        <td>@_enumService.GetDisplayName(OrderOutput.Status)</td>
                        @if (OrderOutput.Manager is not null)
                        {
                            <td>@OrderOutput.Manager.UserName</td>
                        }
                        else
                        {
                            OrderOutput.Manager = new UserOutputModel();
                        }
                        @if (OrderOutput.Client is not null)
                        {
                            <td>@OrderOutput.Client.UserName</td>
                        }
                        else
                        {
                            OrderOutput.Client = new UserOutputModel();
                        }
                    </tr>
                </tbody>
            </table>
        </section>

        <ManagerDialogForAssignManagerModalForm OrderId=Id ManagerId=OrderOutput.Manager.Id></ManagerDialogForAssignManagerModalForm>
    }

    <section>
        <h2 class="manager-h1"> Задачи:</h2>
        <div class="container-task">
            @if (_tasks is not null)
            {
                @foreach (var i in _tasks)
                {
                    <button @onclick="() => ShowModal(i.Id)" ><TaskMasterCard Task="i" OnOpenModal="ShowModal"> </TaskMasterCard> </button>
                }
            }
        </div>
    </section>

    <section>
        <div class="button-container">
            <button onclick="window.manager.showModal()" class="purple-button"> Назначить менеджера на заказ</button>
            <button onclick="window.statusOrder.showModal()" class="purple-button"> Изменить статус заказа</button>
            <button class="purple-button"> История заказа </button>
            <button class="purple-button"> Завершить заказ </button>
            <button class="purple-button" data-bs-toggle="modal" data-bs-target="#taskNew"> Добавить задачу </button>
        </div>
    </section>

    <ManagerDialogForChangeStatusOrderModalForm OrderId=Id></ManagerDialogForChangeStatusOrderModalForm>
    <ManagerDialogForTaskModalForm TaskId=_selectedtaskId></ManagerDialogForTaskModalForm>

    <div class="modal fade" id="taskNew" tabindex="-1" aria-hidden="true">
        <TaskModalForm AddTask="AddTask" />
    </div>
}

@code
{
    private string? _role;

    private bool _isCompleted;

    private bool _isReceieved;

    private int _selectedtaskId;

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public OrderOutputModel OrderOutput { get; set; }

    private IOrderService _orderService;

    private IEnumService _enumService;

    public IEnumerable<TaskOutputModelWithSpecialization> _tasks;

    public ITaskService _taskService;

    public Order()
    {
        OrderOutput = new OrderOutputModel();
        _orderService = new OrderService();
        _enumService = new EnumService();
        _tasks = Enumerable.Empty<TaskOutputModelWithSpecialization>();
        _taskService = new TaskService();

    }

    protected override async Task OnInitializedAsync()
    {
        OrderOutputModel orderOutput = await _orderService.GetOrderById(Id);
        OrderOutput.Id = orderOutput.Id;
        OrderOutput.OrderName = orderOutput.OrderName;
        OrderOutput.Date = orderOutput.Date;
        OrderOutput.Address = orderOutput.Address;
        OrderOutput.CountPeople = orderOutput.CountPeople;
        OrderOutput.Price = orderOutput.Price;
        OrderOutput.Status = orderOutput.Status;
        OrderOutput.Manager = orderOutput.Manager;
        OrderOutput.Client = orderOutput.Client;

        _isReceieved = true;

        _tasks = await _taskService.GetTasksByOrderIdWithSpecialization(Id);
    }

    private async Task ShowModal(int taskId)
    {
        _selectedtaskId = taskId;

        await JSRuntime.InvokeVoidAsync("task.showModal");

        StateHasChanged();
    }

    private void AddTask(TaskInputModel input)
    {
        _taskService.AddTask(input);
    }
}