@page "/order/{Id:int}"
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<GetClaims SendIsCompleted="b=>_isCompleted=b" SendRole="p=>_role=p"></GetClaims>

@if (_isCompleted && _role != RoleUI.Manager.ToString())
{
    <ReturnToStart></ReturnToStart>
}
else
{
    <div class="body">
        <section class="white">
            <table class="table white">
                <thead>
                    <tr>
                        <th>Праздник</th>
                        <th>Дата</th>
                        <th>Адрес</th>
                        <th>Количество гостей</th>
                        <th>Цена</th>
                        <th>Статус</th>
                        <th>Менеджер</th>
                        <th>Клиент</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@OrderOutput.OrderName</td>
                        <td>@OrderOutput.Date</td>
                        <td>@OrderOutput.Address</td>
                        <td>@OrderOutput.CountPeople</td>
                        <td>@OrderOutput.Price</td>
                        <td>@_enumService.GetDisplayName(OrderOutput.Status)</td>
                        <td>@OrderOutput.Manager = orderOutput.Manager</td>
                        <td>@OrderOutput.Manager = orderOutput.Client</td>
                    </tr>
                </tbody>
            </table>
        </section>

        <button onclick="window.manager.showModal()" class="purple-button"> Назначить менеджера на заказ</button>
        <button onclick="window.order.showModal()" class="purple-button"> Изменить статус</button>

        <ManagerDialogForTaskModalForm aaa=14></ManagerDialogForTaskModalForm>
        <section>
            <h2 class="manager-h1"> Задачи:</h2>
            <div class="container-task">
                @if (_task is not null)
                {
                    @foreach (var i in _task)
                    {
                        <button @onclick="() => ShowModal(i.Id)" class="order-button"><TaskManagerCard taskcCard="i" OnOpenModal="ShowModal"> </TaskManagerCard> </button>
                    }
                }
            </div>
        </section>


        <section>
            <div class="button-container">
                <button class="purple-button"> История заказа </button>
                <button class="purple-button"> Завершить заказ </button>
                <button class="purple-button"> Другое</button>
                <button class="order-button"> <AddTaskCard order=OrderOutput> </AddTaskCard> </button>
                
            </div>
        </section>
    </div>
}


@code
{
    private string? _role;

    private bool _isCompleted;

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public OrderOutputModel OrderOutput { get; set; }

    public TaskOutputModel TaskOutput { get; set; }

    private IOrderService _orderService;

    private ITaskService _taskService;

    private IEnumService _enumService;

    public IEnumerable<TaskOutputModelWithSpecialization> _task;

    public StatusUI status;

    public IEnumerable<ManagerNameAndPhoneOutputModel> _managers;

    private List<TaskOutputModelAllInfo> _tasks;

    private IManagerService _managerService;
    public int selectedManagerId;
    public bool isSameManagerSelected = true;
    public int selectedtaskId;

    public Order()
    {
        _orderService = new OrderService();

        _taskService = new TaskService();

        _enumService = new EnumService();

        OrderOutput = new OrderOutputModel();

        _managerService = new ManagerService();

        TaskOutput = new TaskOutputModel();

        IEnumerable<TaskOutputModelWithSpecialization> task = new List<TaskOutputModelWithSpecialization>();

        status = StatusUI.Completed;

    }

     private async Task ShowModal(int taskId)
    {
        selectedtaskId = taskId;

        await JSRuntime.InvokeVoidAsync("user.showModal");

        StateHasChanged();
    }

    public void UpdateStatus()
    {
        _orderService.UpdateOrderStatus(Id, status);
    }
    public void Close()
    {

        NavigationManager.NavigateTo("/order/Id");
    }

    protected override async Task OnInitializedAsync()
    {
            OrderOutputModel orderOutput = await _orderService.GetOrderById(Id);
            OrderOutput.Id = orderOutput.Id;
            OrderOutput.OrderName = orderOutput.OrderName;
            OrderOutput.Date = orderOutput.Date;
            OrderOutput.Address = orderOutput.Address;
            OrderOutput.CountPeople = orderOutput.CountPeople;
            OrderOutput.Price = orderOutput.Price;
            OrderOutput.Status = orderOutput.Status;
            OrderOutput.Manager = orderOutput.Manager;
            selectedManagerId = orderOutput.Manager.Id;

            _managers = await _managerService.GetAllManagers();

        _task = await _taskService.GetTasksByOrderIdWithSpecialization(Id);
    }

    public void UpdateStatusOrder(ChangeEventArgs e)
    {
        int newStatusInt = int.Parse(e.Value.ToString());

        StatusUI newStatus = new StatusUI();

        switch (newStatusInt)
        {
            case 0:
                newStatus = StatusUI.Received;

                break;
            case 1:
                newStatus = StatusUI.InProgress;

                break;
            case 2:
                newStatus = StatusUI.Completed;

                break;
            case 3:
                newStatus = StatusUI.Canselled;

                break;
        }

        _orderService.UpdateOrderStatus(Id, newStatus);
    }

    public void ManagerSelection(ChangeEventArgs e)
    {
        selectedManagerId = int.Parse(e.Value.ToString());

        isSameManagerSelected = selectedManagerId == OrderOutput.Manager.Id;
    }

    public void AddManagerToOrder()
    {
        _managerService.AddManagerIdToOrder(selectedManagerId, Id);
    }
}