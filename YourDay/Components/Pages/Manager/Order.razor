@page "/order/{Id:int}"
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<GetClaims SendIsCompleted="b=>_isCompleted=b" SendRole="p=>_role=p"></GetClaims>

@if (_isCompleted && _role != RoleUI.Manager.ToString())
{
    <ReturnToStart></ReturnToStart>
}
else
{
    if (_isReceieved)
    {
        <section class="white">
            <table class="table white">
                <thead>
                    <tr>
                        <th>Праздник</th>
                        <th>Дата</th>
                        <th>Адрес</th>
                        <th>Количество гостей</th>
                        <th>Цена</th>
                        <th>Статус</th>
                        <th>Менеджер</th>
                        <th>Клиент</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@OrderOutput.OrderName</td>
                        <td>@OrderOutput.Date</td>
                        <td>@OrderOutput.Address</td>
                        <td>@OrderOutput.CountPeople</td>
                        <td>@OrderOutput.Price</td>
                        <td>@_enumService.GetDisplayName(OrderOutput.Status)</td>
                        @if (OrderOutput.Manager is not null)
                        {
                            <td>@OrderOutput.Manager</td>
                        }
                        else
                        {
                            OrderOutput.Manager = new UserOutputModel();
                        }
                        @if (OrderOutput.Client is not null)
                        {
                            <td>@OrderOutput.Client</td>
                        }
                        else
                        {
                            OrderOutput.Client = new UserOutputModel();
                        }
                    </tr>
                </tbody>
            </table>
        </section>

        <ManagerDialogForAssignManagerModalForm OrderId=Id ManagerId=OrderOutput.Manager.Id></ManagerDialogForAssignManagerModalForm>
        <ManagerDialogForChangeStatusOrderModalForm OrderId=Id></ManagerDialogForChangeStatusOrderModalForm>
    }

    <button onclick="window.manager.showModal()" class="purple-button"> Назначить менеджера на заказ</button>
    <button onclick="window.statusOrder.showModal()" class="purple-button"> Изменить статус</button>
}

@code
{
    private string? _role;

    private bool _isCompleted;

    private bool _isReceieved;

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public OrderOutputModel OrderOutput { get; set; }

    private IOrderService _orderService;

    private IEnumService _enumService;

    public Order()
    {
        OrderOutput = new OrderOutputModel();
        _orderService = new OrderService();
        _enumService = new EnumService();
    }

    protected override async Task OnInitializedAsync()
    {
        OrderOutputModel orderOutput = await _orderService.GetOrderById(Id);
        OrderOutput.Id = orderOutput.Id;
        OrderOutput.OrderName = orderOutput.OrderName;
        OrderOutput.Date = orderOutput.Date;
        OrderOutput.Address = orderOutput.Address;
        OrderOutput.CountPeople = orderOutput.CountPeople;
        OrderOutput.Price = orderOutput.Price;
        OrderOutput.Status = orderOutput.Status;
        OrderOutput.Manager = orderOutput.Manager;
        OrderOutput.Client = orderOutput.Client;
        _isReceieved = true;
    }
}