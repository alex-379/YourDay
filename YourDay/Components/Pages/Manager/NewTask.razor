@page "/newTaskfororder/{Id:int}"
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

@if (returnRole != RoleUI.Manager.ToString())
{
    <ReturnToStart></ReturnToStart>
}
else
{
    <section>
        <div class="back">
            <section>
                <div class="container-add-order">
                    <div class="fields-add-order">
                        <form>
                            <h2>Добавить задачу:</h2>
            
                                <div class="conteiner-for-text">
                                    <label class="text" >Название:</label>
                            <input @bind="taskInputModel.Title" class="field" type="name" placeholder="Введите название:">
                                </div>

                                <div class="conteiner-for-text">
                                    <label class="text">Описание:</label>
                            <input @bind="taskInputModel.Description" class="field" type="name" placeholder="Введите описание:">
                                </div>

                                <div class="conteiner-for-text">
                                    <label  class="text" Выберите специализацию:</label>
                                    <select @bind="selectedSpecialization">
                                        <option value=1>Флорист</option>
                                        <option value=2>Оформитель</option>
                                        <option value=3>Грузчик</option>
                                    </select>
                                </div>
                                <div class="conteiner-for-text">
                                    <label class="text" >Время начала:</label>
                            <input @bind="taskInputModel.TimeStart" class="field" type="time" placeholder="Введите время">
                                </div>
                                <div class="conteiner-for-text">
                                    <label class="text">Время конца:</label>
                            <input @bind="taskInputModel.TimeEnd" class="field" type="time" placeholder="Введите время">
                                </div>
                                  
                            </form>

                            <div>
                                    <button class="purple-button" @onclick="AddTask">Создать</button>
                                    <button @onclick="Main"  class="purple-button"> Вернуться </button>
                            </div>
                            <div class="conteiner-for-text">
                                <label class="text">Специализация:</label>
                                <input class="field" type="name" placeholder="Введите специализацию">
                            </div>
                            <div class="conteiner-for-text">
                                <label class="text">Мастер:</label>
                                <input class="field" type="text" placeholder="Введите мастера">
                            </div>
                            <div class="conteiner-for-text">
                                <label class="text">Дата:</label>
                                <input class="field" type="number" placeholder="Введите дату">
                            </div>
                            <div class="conteiner-for-text">
                                <label class="text" for="fruits">Статус:</label>
                                <select class="field">
                                    <option>Получено</option>
                                    <option>Назначено</option>
                                    <option>Сделано</option>
                                </select>

</section>

                        <div>
                            <button class="purple-button">Создать</button>
                            <button class="purple-button"> Вернуться </button>
                        </div>
                    </div>
                </div>
            </section>
        </div>

    </section>
}
    public int Id { get; set; }

@code {
    [CascadingParameter]
    public Task<AuthenticationState> State { get; set; }

    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    private string returnRole;

    protected override async Task OnInitializedAsync()
    {
        await GetClaims().ConfigureAwait(false);
    }

    private async Task GetClaims()
    {
        var authState = await State;
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            claims = user.Claims;
            returnRole = claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value).Single();
        }
    }
    private ITaskService _taskService;
    private IOrderService _orderService;
    private void AddTask()
    {
        taskInputModel.Order = _orderService.GetOrderByIdForAddTask(5);
        _taskService.AddTask(taskInputModel, Id, selectedSpecialization);

        NavigationManager.NavigateTo("/manager");
    }
    private void Main()
    {
        NavigationManager.NavigateTo("/manager");
    }

    // Переменная для хранения выбранного значения
    private int selectedSpecialization;

    // Метод, который будет вызываться при изменении значения в select
    private void OnSpecializationChange(ChangeEventArgs e)
    {
        selectedSpecialization = (int)e.Value;
    }
}