@page "/newOrder"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager 

@if (returnRole != RoleUI.Manager.ToString())
{
    <ReturnToStart></ReturnToStart>
}
else
{
    <div class="back">
        <section>

            <div class="container-add-order">
                <div class="fields-add-order">
                    <form>
                        <h2>Добавить заказ:</h2>

                        <div class="conteiner-for-text">
                            <label class="text">Название праздника:</label>
                            <input @bind="_inputModel.OrderName" class="field" type="name" placeholder="Введите название праздника">
                        </div>
                        @*                             <div class="conteiner-for-text">
                    <label class="text" >Клиент:</label>
                    <input @bind="_inputModel.ClientId" class="field"   placeholder="Выберите имя клиента" type="number">
                    </div>
                    <div class="conteiner-for-text">
                    <label class="text" >Менеджер:</label>
                    <input @bind="_inputModel.ManagerId" class="field"  type="number" placeholder="Выберите имя менеджера">
                    </div>
                    <div class="conteiner-for-text">
                    <label class="text" >Статус:</label>
                    <input @bind="_inputModel.StatusId" class="field" type="number" placeholder="Выберите статус:">
                    </div> *@
                        <div class="conteiner-for-text">
                            <label class="text">Дата:</label>
                            <input @bind="_inputModel.Date" class="field" type="text" placeholder="Введите дату праздника">
                        </div>
                        <div class="conteiner-for-text">
                            <label class="text">Адрес;</label>
                            <input @bind="_inputModel.Address" class="field" type="text" placeholder="Введите адрем вашего события">
                        </div>
                        <div class="conteiner-for-text">
                            <label class="text">Количество человек:</label>
                            <input @bind="_inputModel.CountPeople" class="field" type="number" placeholder="Введите сколько будет людей на празднике">
                        </div>
                        <div class="conteiner-for-text">
                            <label class="text">Цена:</label>
                            <input @bind="_inputModel.Price" class="field" type="number" placeholder="Введите цену">
                        </div>
                        @*                             <div class="conteiner-for-text">
                    <label class="text" >Оценка:</label>
                    <input @bind="_inputModel.Evaluation" class="field"  type="number"  placeholder="Введите дополнительную информацию">
                    </div> *@
                        @*                             <div class="conteiner-for-text">
                    <label class="text" >Комментарии:</label>
                    <input @bind="_inputModel.Comments" class="field"  type="text"  placeholder="Введите дополнительную информацию">
                    </div> *@

                    </form>

                    @*                         <div>
                <button @onclick="AddOrder" class="purple-button">Создать</button>
                <button class="purple-button" @onclick="Main"> Назад </button>
                </div> *@
                </div>
            </div>
        </section>

        <section>

            <p>@_inputModel.OrderName  @_inputModel.Date</p>
            <div style="display:flex; flex-wrap: wrap">
                @foreach (var i in _orders)
                {
                    @* <ProductCard ProductName=@i.Name Cost=i.Cost/> *@
                    <OrderCard order=i></OrderCard>
                }
            </div>
        </section>
    </div>
}

@code
{
    private OrderForManagerInputModel _inputModel;

    private IEnumerable<OrderNameDateOutputModel> _orders;

    private IOrderService _orderService;

    [CascadingParameter]
    public Task<AuthenticationState> State { get; set; }

    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    private string returnRole;


    // public NewOrder()
    // {
    //     _orderService = new OrderServiceMock();

    //     _orders = _orderService.GetAllOrders();

    //     _inputModel = new OrderInputModel();
    // }

    // public void AddOrder()
    // {
    //     _orders.Add(_orderService.AddOrder(_inputModel));
    // }

    private void Main()
    {
        NavigationManager.NavigateTo("/manager");
    }

    protected override async Task OnInitializedAsync()
    {
        await GetClaims().ConfigureAwait(false);
    }

    private async Task GetClaims()
    {
        var authState = await State;
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            claims = user.Claims;
            returnRole = claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value).Single();
        }
    }
}