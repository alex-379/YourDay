@page "/statistics"
@rendermode InteractiveServer

@if (returnRole != RoleUI.Manager.ToString())
{
    <ReturnToStart></ReturnToStart>
}
else
{
    <h3>Статистика</h3>

    <div class="body">
        <section>
            <table class="table">
                <thead>
                    <tr>
                        <th>Имя</th>
                        <th>Заказы</th>
                        <th>Статусы заказов</th>

                    </tr>
                </thead>
                <tbody>
                    <tr>
                        @* <td>@model.Manager</td>
                    <td>@model.Orders</td>
                    <td>@model.Orders.Select(order=>order.Status)</td> *@
                    </tr>
                </tbody>
            </table>
        </section>

    </div>
}


@code
{
    [Parameter]
    public int Id{ get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> State { get; set; }

    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    private string returnRole;

   // public CompanyStatisticOutputModel model { get; set; }

    //private ManagerService _manager = new ManagerService();

    protected override void OnInitialized()
    {
        //model = _manager.GetManagerIdByOrders(Id);
    }

    protected override async Task OnInitializedAsync()
    {
        await GetClaims().ConfigureAwait(false);
    }

    private async Task GetClaims()
    {
        var authState = await State;
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            claims = user.Claims;
            returnRole = claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value).Single();
        }
    }
}