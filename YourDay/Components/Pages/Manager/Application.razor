@page "/applications"
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<GetClaims SendIsCompleted="b=>_isCompleted=b" SendRole="p=>_role=p"></GetClaims>

@if (_isCompleted && _role != RoleUI.Manager.ToString())
{
    <ReturnToStart></ReturnToStart>
}
else
{
    <div class="body">
        <ManagerDialogForApplicationModalForm SelectedClientId="selectedClientId"></ManagerDialogForApplicationModalForm>

        <section>
            <div class="manager-blok">
                <h2 class="manager-h1"> Наши заявки:</h2>
                <div @* class="manager-button-container" *@>
                    @foreach (var i in _orders)
                    {
                        <button @onclick="() => ShowModal(i.Id)" class="worker-button"> <OrderCard order="i" OnOpenModal="ShowModal"> </OrderCard> </button>
                    }
                </div>
            </div>
        </section>
    </div>
}

@code {
    private string? _role;

    private bool _isCompleted;

    private IOrderService _orderService;

    private IEnumerable<OrderNameDateOutputModel> _orders;

    private int selectedClientId;

    public Application()
    {
        _orderService = new OrderService();
        // _orders = Enumerable.Empty<OrderNameDateOutputModel>();
        _orders = new List<OrderNameDateOutputModel>();
    }

    protected override async Task OnInitializedAsync()
    {
        _orders = await _orderService.GetAllApplications();
    }

    private async Task ShowModal(int clientId)
    {
        selectedClientId = clientId;

        await JSRuntime.InvokeVoidAsync("order.showModal");

        StateHasChanged();
    }
}