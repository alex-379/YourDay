@page "/applications"
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<GetClaims SendIsCompleted="b=>_isCompleted=b" SendRole="p=>_role=p"></GetClaims>

@if (_isCompleted && _role != RoleUI.Manager.ToString())
{
    <ReturnToStart></ReturnToStart>
}
else
{
    <div class="body">
        <ManagerDialogForApplicationModalForm SelectedClientId=selectedClientId></ManagerDialogForApplicationModalForm>

        <section>
            <h2 class="manager-h1">Заявки:</h2>
            <div class="container-task">
                @foreach (var i in _applications)
                {
                    <button @onclick="() => ShowModal(i.Id)" class="worker-button"> <ApplicationCard Application="i" OnOpenModal="ShowModal"> </ApplicationCard> </button>
                }
            </div>
        </section>
    </div>
}

@code {
    private string? _role;

    private bool _isCompleted;

    private bool isClick;

    private IEnumerable<ApplicationOutputModel> _applications;

    private IOrderService _orderService;

    private int selectedClientId;

    public Application()
    {
        _orderService = new OrderService();
        _applications = Enumerable.Empty<ApplicationOutputModel>();
    }

    protected override async Task OnInitializedAsync()
    {
        _applications = await _orderService.GetAllApplications();
    }

    private async Task ShowModal(int clientId)
    {
        selectedClientId = clientId;

        await JSRuntime.InvokeVoidAsync("application.showModal");

        StateHasChanged();
    }
}