@page "/clients"
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<GetClaims SendIsCompleted="b=>_isCompleted=b" SendRole="p=>_role=p"></GetClaims>

@if (_isCompleted && _role != RoleUI.Manager.ToString())
{
    <ReturnToStart></ReturnToStart>
}
else
{
    <div class="body">

        <dialog id="worker" aria-labelledby="heading">
            <h2 id="heading">Что вы хотите сделать? &#128056 </h2>

            <form method="dialog">
                <button>
                    Полная информация
                </button>
                <button>
                    Изменить
                </button>
                <button @onclick="DeleteClient">
                    Удалить
                </button>
                <button>
                    Закрыть
                </button>
            </form>
        </dialog>

        <section>
            <h2 class="manager-h1"> Клиенты:</h2>
            <div class="container-task">
                <button class="order-button" @onclick="NavigateToPage"> + </button>
                @foreach (var i in _clients)
                {
                    <button @onclick="() => ShowModal(i.Id)" class="worker-button"> <WorkerCard worker="i" OnOpenModal="ShowModal"> </WorkerCard> </button>
                }
            </div>
        </section>
    </div>
}

@code
{
    private string? _role;

    private bool _isCompleted;

    private UserService _userService;

    private IEnumerable<UserSpecializationOutputModel> _clients;

    public RoleUI b;

    private int selectedClientId;

    public Clients()
    {

        RoleUI role = new RoleUI();

        role = RoleUI.Client;

        UserService _userService = new UserService();

        _clients = _userService.GetAllUsersSpecializationByRole(role);
    }

    protected override void OnInitialized()
    {
        //что здесь писать
    }

    private async Task ShowModal(int clientId)
    {
        selectedClientId = clientId;

        await JSRuntime.InvokeVoidAsync("worker.showModal");

        StateHasChanged();
    }

    private void DeleteClient()
    {
        UserService _userService = new UserService();

        _userService.DeleteByManager(selectedClientId); //dd
    }

    private void NavigateToPage()
    {
        NavigationManager.NavigateTo("/newclient");
    }
}