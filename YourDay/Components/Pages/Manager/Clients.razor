@page "/clients"
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<GetClaims SendIsCompleted="b=>_isCompleted=b" SendRole="p=>_role=p"></GetClaims>

@if (_isCompleted && _role != RoleUI.Manager.ToString())
{
    <ReturnToStart></ReturnToStart>
}
else
{
    <div class="body">
        <ManagerDialog SelectedClientId=selectedClientId></ManagerDialog>

        <section>
            <h2 class="manager-h1"> Клиенты:</h2>
            <div class="container-task">
                <button class="order-button" data-bs-toggle="modal" data-bs-target="#registrationForManager"> + </button>
                @foreach (var i in _clients)
                {
                    <button @onclick="() => ShowModal(i.Id)" class="worker-button"> <WorkerCard worker="i" OnOpenModal="ShowModal"> </WorkerCard> </button>
                }
            </div>
        </section>
    </div>

    <div class="modal fade" id="registrationForManager" tabindex="-1" aria-hidden="true">
        <RegistrationModalForm AddUser="AddClient" />
    </div>
}

@code {
    private string? _role;

    private bool _isCompleted;

    private IUserService _userService;

    private IEnumerable<UserSpecializationOutputModel> _clients;

    private int selectedClientId;

    public Clients()
    {
        _userService = new UserService();
        _clients = Enumerable.Empty<UserSpecializationOutputModel>();
    }

    protected override void OnInitialized()
    {
        _clients = _userService.GetAllUsersSpecializationByRole(RoleUI.Client);
    }

    private void AddClient(UserRegistrationInputModel input)
    {
        _userService.AddClientForManager(input);
    }

    private async Task ShowModal(int clientId)
    {
        selectedClientId = clientId;

        await JSRuntime.InvokeVoidAsync("user.showModal");

        StateHasChanged();
    }
}