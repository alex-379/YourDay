@page "/task/{Id:int}"
@rendermode InteractiveServer
@using YourDay.BLL.IServices

<GetClaims SendIsCompleted="b=>_isCompleted=b" SendRole="p=>_role=p"></GetClaims>

@if (_isCompleted && _role != RoleUI.Worker.ToString())
{
    <ReturnToStart></ReturnToStart>
}
else
{
    <div>
        <div>
            <div class="container-task">
                <TaskWorkerCard Task="_task"></TaskWorkerCard>
                <form>
                    <select @onchange="UpdateStatusTask">
                        <option value="0">@_enumService.GetDisplayName(StatusUI.Received)</option>
                        <option value="1">@_enumService.GetDisplayName(StatusUI.InProgress)</option>
                        <option value="2">@_enumService.GetDisplayName(StatusUI.Completed)</option>
                        <option value="3">@_enumService.GetDisplayName(StatusUI.Canselled)</option>
                    </select>
                </form>

            </div>
        </div>
    </div>
}

@code {
    private string? _role;

    private bool _isCompleted;

    [Parameter]
    public int Id { get; set; }

    private ITaskService _taskService;

    private IEnumService _enumService;

    private TaskOutputModelAllInfo _task;

    public TaskPage()
    {
        _taskService = new TaskService();
        _enumService = new EnumService();
    }

    protected override async Task OnInitializedAsync()
    {
        if (_role == RoleUI.Worker.ToString())
        {
            _task = await _taskService.GetTaskByIdWithAll(Id);
        }
    }

    public void UpdateStatusTask(ChangeEventArgs e)
    {
        int newStatusInt = int.Parse(e.Value.ToString());

        StatusUI newStatus = StatusUI.Received;

        switch (newStatusInt)
        {
            case 0:
                newStatus = StatusUI.Received;

                break;
            case 1:
                newStatus = StatusUI.InProgress;

                break;
            case 2:
                newStatus = StatusUI.Completed;

                break;
            case 3:
                newStatus = StatusUI.Canselled;

                break;
        }

        _taskService.UpdateTaskStatusByTaskId(Id, newStatus);
    }
}