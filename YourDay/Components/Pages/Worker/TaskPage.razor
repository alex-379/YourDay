@page "/task/{Id:int}"
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<GetClaims SendIsCompleted="b=>_isCompleted=b" SendRole="p=>_role=p"></GetClaims>

@if (_isCompleted && _role != RoleUI.Worker.ToString())
{
    <ReturnToStart></ReturnToStart>
}
else
{
    if (_isReceieved)
    {
        <section class="blue">
            <table class="table blue">
                <thead>
                    <tr>
                        <th>Название</th>
                        <th>Описание</th>
                        <th>Время начала</th>
                        <th>Время окончания</th>
                        <th>Статус</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@Task.Title</td>
                        <td>@Task.Description</td>
                        <td>@Task.TimeStart</td>
                        <td>@Task.TimeEnd</td>
                        <td>@_enumService.GetDisplayName(Task.Status)</td>
                    </tr>
                </tbody>
            </table>
        </section>

        <div>
            <div>
                <div class="container-task">
                    <TaskWorkerCard Task="Task"></TaskWorkerCard>
                    <form>
                        <select @onchange="UpdateStatusTask">
                            <option value="0">@_enumService.GetDisplayName(StatusUI.Received)</option>
                            <option value="1">@_enumService.GetDisplayName(StatusUI.InProgress)</option>
                            <option value="2">@_enumService.GetDisplayName(StatusUI.Completed)</option>
                            <option value="3">@_enumService.GetDisplayName(StatusUI.Canselled)</option>
                        </select>
                    </form>

                </div>
            </div>
        </div>
    }
}

@code
{
    private string? _role;

    private bool _isCompleted;

    private bool _isReceieved;

    private int _selectedtaskId;

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public TaskOutputModelAllInfo Task { get; set; }

    private IOrderService _orderService;

    private IEnumService _enumService;

    public IEnumerable<TaskOutputModelAllInfo> _tasks;

    public ITaskService _taskService;

    public TaskPage()
    {
        Task = new TaskOutputModelAllInfo();
        _orderService = new OrderService();
        _enumService = new EnumService();
        _tasks = Enumerable.Empty<TaskOutputModelAllInfo>();
        _taskService = new TaskService();
    }

    protected override async Task OnInitializedAsync()
    {
        TaskOutputModelAllInfo taskOutput = await _taskService.GetTaskByIdWithAll(Id);
        Task.Title = taskOutput.Title;
        Task.Description = taskOutput.Description;
        Task.TimeStart = taskOutput.TimeStart;
        Task.TimeEnd = taskOutput.TimeEnd;
        Task.Status = taskOutput.Status;

        _isReceieved = true;

        _tasks = await _taskService.GetTasksByOrderIdWithAll(Id);
    }

    public void UpdateStatusTask(ChangeEventArgs e)
    {
        int newStatusInt = int.Parse(e.Value.ToString());

        StatusUI newStatus = StatusUI.Received;

        switch (newStatusInt)
        {
            case 0:
                newStatus = StatusUI.Received;

                break;
            case 1:
                newStatus = StatusUI.InProgress;

                break;
            case 2:
                newStatus = StatusUI.Completed;

                break;
            case 3:
                newStatus = StatusUI.Canselled;

                break;
        }

        _taskService.UpdateTaskStatusByTaskId(Id, newStatus);
    }
}