@page "/contactTheManager"
@attribute [StreamRendering]

<GetClaims SendIsCompleted="b=>_isCompleted=b" SendRole="p=>_role=p"></GetClaims>

@if (_isCompleted && _role != RoleUI.Worker.ToString())
{
    <ReturnToStart></ReturnToStart>
}
else
{
    <PageTitle>ContactTheManager</PageTitle>

    <div>
        <h2 class="manager-h1">Здесь вы можете связаться с менеджером:</h2>
    </div>

    <table>
        <thead>
            @foreach (Column column in Columns)
            {
            <th>
                    @column.LayoutHeader
            </th>
            }
        </thead>
        <tbody>
            @foreach (ManagerNameAndPhoneOutputModel manager in _models)
            {
                <tr>
                    @foreach (Column column in Columns)
                    {
                        <td>
                            @typeof(ManagerNameAndPhoneOutputModel).GetProperty(column.Field).GetValue(manager)
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string? _role;

    private bool _isCompleted;

    private IEnumerable<ManagerNameAndPhoneOutputModel> _models;

    private IManagerService _managers;

    private List<Column> Columns { get; set; }

    class Column
    {
        public string Field { get; set; }
        public string LayoutHeader { get; set; }
    }

    public ContactTheManager()
    {
        _models = new List<ManagerNameAndPhoneOutputModel>();
        _managers = new ManagerService();
        Columns = new List<Column>();
    }

    protected override async Task OnInitializedAsync()
    {
        {
            Columns = new List<Column>();

            Columns.AddRange(
                new Column[]
                {
                new Column()
                {
                    Field="Name",
                    LayoutHeader="Имя"
                },

                new Column()
                {
                    Field="Phone",
                    LayoutHeader="Телефон"
                }
                });

            _models = await _managers.GetAllManagers();
        }
    }
}